apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //开启MultiDex分包方法
        multiDexEnabled true

        kapt {
            arguments {
                // 阿里路由的包参数
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }

        // 资源前置限定，只报红，编译可以通过
        resourcePrefix "${project.name}_"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        // 解决ktx的编译问题，默认使用的是1.6
        jvmTarget = "1.8"
    }
    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])

        //把implementation 用api代替,它是对外部公开的, 所有其他的module就不需要添加该依赖


        // Android必须的库
        api "androidx.appcompat:appcompat:${versions.appcompatVersion}"
        api 'com.android.support:appcompat-v7:28.0.0'

        // kotlin相关
        api "org.jetbrains.kotlin:kotlin-stdlib:${versions.kotlinStdlibJdkVersion}" // 基础
        api "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlinReflectVersion}" // 反射
        api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinxCoroutinesCoreVersion}" // 携程
        api "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinxCoroutinesAndroidVersion}" // 携程Android main

        // ktx
        api "androidx.core:core-ktx:${versions.coreKtxVersion}" // Android简便扩展库
        api "androidx.fragment:fragment-ktx:${versions.fragmentKtxVersion}"
        api "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycleKtxVersion}"
        api "androidx.lifecycle:lifecycle-livedata-core-ktx:${versions.lifecycleKtxVersion}"
        api "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycleKtxVersion}"
        api "androidx.lifecycle:lifecycle-reactivestreams-ktx:${versions.lifecycleKtxVersion}"
        api "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycleKtxVersion}"

        // 常用工具
        api "com.android.support:multidex:${versions.multidexVersion}" // 分包
        api "com.orhanobut:logger:${versions.loggerVersion}" // 日志
        api "com.github.tbruyelle:rxpermissions:${versions.rxpermissionsVersion}" // 权限
        api "com.alibaba:arouter-api:${versions.arouterApiVersion}" // 阿里路由
        api "com.gyf.immersionbar:immersionbar:${versions.immersionbarVersion}" // 沉浸式bar
        api "com.gyf.immersionbar:immersionbar-components:${versions.immersionbarVersion}" // fragment快速实现（可选）
        api "com.gyf.immersionbar:immersionbar-ktx:${versions.immersionbarVersion}" // kotlin扩展（可选）
        api "com.github.tamsiree.RxTool:RxKit:${versions.rxToolVersion}" //基础工具库(RxTool)
        api "com.fasterxml.jackson.core:jackson-core:${versions.jacksonVersion}" // jackson序列化工具，做kotlin的deepCopy使用
        api "com.fasterxml.jackson.core:jackson-databind:${versions.jacksonVersion}"
        api "com.google.code.gson:gson:${versions.gsonVersion}" // gson
        api("com.squareup.moshi:moshi:${versions.moshiVersion}") // moshi
        api "io.reactivex.rxjava3:rxjava:${versions.rxjavaVersion}" // rxJava
        api "io.reactivex.rxjava3:rxandroid:${versions.rxandroidVersion}" // rxAndroid
        api "com.squareup.okio:okio:${versions.okioVersion}" // okio
        api "com.squareup.okhttp3:okhttp:${versions.okhttpVersion}" // okHttp
        api "com.squareup.retrofit2:retrofit:${versions.retrofitVersion}" // retrofit
        api "com.squareup.retrofit2:converter-gson:${versions.converterGsonVersion}" // retrofit转json
        api "com.github.bumptech.glide:glide:${versions.glideVersion}" // glide图片加载，还需要配置annotationProcessor到使用的类中
//        kapt "com.github.bumptech.glide:compiler:${versions.glideVersion}" // glide annotationProcessor

        // 系统控件
        api "androidx.constraintlayout:constraintlayout:${versions.constraintlayoutVersion}"
        api "androidx.recyclerview:recyclerview:${versions.recyclerviewVersion}"
        api "androidx.cardview:cardview:${versions.cardviewVersion}"
        api "androidx.viewpager2:viewpager2:${versions.viewpager2}"
        api "com.google.android:flexbox:${versions.flexboxVersion}" // 弹性控件（功能强大）
        api "com.google.android.material:material:${versions.materialVersion}"

        // 第三方控件
        api "com.github.CymChad:BaseRecyclerViewAdapterHelper:${versions.BaseRecyclerViewAdapterHelperVersion}" // adapter
        api 'io.github.youth5201314:banner:2.2.2' // 轮播图
        api 'com.github.hackware1993:MagicIndicator:1.7.0' // 指示器
        api 'io.github.scwang90:refresh-layout-kernel:2.0.5'      // 下拉刷新核心必须依赖
        api 'io.github.scwang90:refresh-header-classics:2.0.5'  // 下拉刷新的经典头

        /*// annotationProcessor的测试注解
        api project(":apt-annotation")
        //annotationProcessor在公共类中引用无效，只有初始化方法会执行，所以应该放在需要使用processor的module中
        kapt project(":apt-processor")*/
    }
}

